# -*- coding: utf-8 -*-
"""data_processing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o0lisQS3GkPqRS-S_Cj4cZdRgn08f7oZ
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

class DataPreprocessing:
    def __init__(self, data):
        self.data = data

    def clean_data(self):
      #Handles missing missing features
      self.data["Age"] = self.data["Age"].fillna(self.data["Age"].mean())
      return self.data

    def bin_age(self):
      age = [0,9,17,39,59,120]
      age_label = ["child", "Teen", "y_adult", "m_adult", "senior"]
      self.data["AgeGroup"] = pd.cut(self.data["Age"], bins=age, labels=age_label)
      return self.data

    def simplify_title(self, title):
        royalty = ['Don', 'Sir', 'Lady', 'the Countess', 'Jonkheer', 'Prince']
        military = ['Major', 'Col', 'Capt']
        professional = ['Dr', 'Rev']
        if title in ['Mme']:
            return 'Mrs'
        elif title in ['Mlle', 'Ms']:
            return 'Miss'
        elif title in royalty:
            return 'Royalty'
        elif title in military:
            return 'Military'
        elif title in professional:
            return 'Professional'
        else:
            return title  # Keep common titles like Mr, Mrs, Miss, Maste


    def extract_title(self):
      #Extracts title from the name feature.
      self.data["Title"] = self.data["Name"].apply(lambda x: x.split(",")[1].split(".")[0].strip())
      self.data["TitleGroup"] = self.data["Title"].apply(self.simplify_title)
      return self.data

    def feature_engineering(self):
      #Creates new features based on other features.
      self.data["FamilySize"] = self.data["SibSp"] + self.data["Parch"] + 1
      self.data["IsAlone"] = self.data["FamilySize"].apply(lambda x:1 if x ==1 else 0)
      self.data = self.bin_age()
      self.data  = self.extract_title()
      return self.data

    def pre_normaliztion(self, feature):
      #Logarithmic transformation:Fare'is skewed, a
      #logarithmic transformation help normalize the distribution and reduce the impact of outliers.
      self.data[feature] = np.log1p(self.data[feature])
      return self.data

    def feature_normalization(self, features):
      #Normaling data features btween -1 and 1
      scaler = StandardScaler()
      self.data[features] = scaler.fit_transform(self.data[features])
      return self.data

    def encode_gender(self):
      #Encode sex feature
      self.data["Sex"] = self.data["Sex"].map({"male":0, "female":1})
      return self.data

    def one_hot_encoding_features(self, features):
      #Use One-Hot encoding on given features
      for feature in features:
        self.data = pd.get_dummies(self.data, columns=[feature], drop_first= True)
      return self.data

    def drop_features(self,features):
      self.data.drop(columns = features, inplace = True)
      return self.data

    def split_dataset(self):
      X = self.data.drop("Survived", axis = 1)
      y = self.data["Survived"]
      X_train, X_test, y_test, y_test = train_test_split(X,y, test_size=0.2, random_state=42, stratify=y)
      return X_train, X_test, y_test, y_test

from os import pread
df = pd.read_csv("Titanic-Dataset.csv")
processData = DataPreprocessing(df)
processData.clean_data()
processData.feature_engineering()
processData.pre_normaliztion("Fare")
processData.feature_normalization(['Age', 'Fare', 'SibSp', 'Parch','FamilySize'])
processData.encode_gender()
processData.one_hot_encoding_features(["Embarked", "AgeGroup", "TitleGroup"])
processData.drop_features(["PassengerId", "Name", "Title", "Ticket", "Cabin"])
processData.data.head(3)
#processData.data.isna().sum()

processData